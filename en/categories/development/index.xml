<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Marco Denisi</title>
    <link>https://marcodenisi.dev/en/categories/development/</link>
    <description>Recent content in Development on Marco Denisi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>it</language>
    <lastBuildDate>Fri, 10 Jan 2020 10:30:41 +0100</lastBuildDate>
    
	<atom:link href="https://marcodenisi.dev/en/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Why you should use Conventional Commits</title>
      <link>https://marcodenisi.dev/en/blog/why-you-should-use-conventional-commits/</link>
      <pubDate>Fri, 10 Jan 2020 10:30:41 +0100</pubDate>
      
      <guid>https://marcodenisi.dev/en/blog/why-you-should-use-conventional-commits/</guid>
      <description>Nowadays, versioning systems are used everywhere to simplify collaboration between developers working on the same codebase. That&amp;rsquo;s great, if it weren&amp;rsquo;t that, in the long run, commits history starts looking like this:
Has a commit introduced a breaking change? Any fix? Good luck finding the answer just looking at that: you&amp;rsquo;d better start walking in your open space asking who did what.
From this another problem arises. Let&amp;rsquo;s say you have to decide the software version number.</description>
    </item>
    
    <item>
      <title>Github Actions: a concrete example with Hugo and Latex</title>
      <link>https://marcodenisi.dev/en/blog/github-actions-a-concrete-example-with-hugo-and-latex/</link>
      <pubDate>Tue, 05 Nov 2019 10:26:59 +0100</pubDate>
      
      <guid>https://marcodenisi.dev/en/blog/github-actions-a-concrete-example-with-hugo-and-latex/</guid>
      <description>Months ago I decided to write my curriculum using Latex and to use Github to version it (here the repository). I said to myself that it would be beautiful to automatically create the latest cv version as a pdf file whenever I update the source files, maybe as a Github release.
I had the same desire when I started thinking about this blog: wouldn&amp;rsquo;t be amazing if at each new content, a new blog version was deployed automatically?</description>
    </item>
    
    <item>
      <title>Lambda Step by Step</title>
      <link>https://marcodenisi.dev/en/blog/lambda-step-by-step/</link>
      <pubDate>Thu, 26 Sep 2019 00:07:46 +0200</pubDate>
      
      <guid>https://marcodenisi.dev/en/blog/lambda-step-by-step/</guid>
      <description>During last weeks, I&amp;rsquo;ve worked a lot with AWS Lambda.
The main challenge I had was to look for a method to locally test those functions. Of course, it is possible to do some partial code execution as part of unit/integration test setup, but that wonâ€™t be close enough to production setup.
I&amp;rsquo;d like to build a sort of how-to guide in order to have a reference in the future.</description>
    </item>
    
  </channel>
</rss>